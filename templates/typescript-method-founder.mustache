/**
* {{&summary}}
* @method
{{#externalDocs}}
* @see {@link {{&url}}|{{#description}}{{&description}}{{/description}}{{^description}}External docs{{/description}}}
{{/externalDocs}}
* @name {{&className}}#{{&actionName}}
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
public async {{&actionName}}(parameters: {
{{#parameters}}
{{#isQueryParameter}}{{^isSingleton}}'{{&camelCaseName}}'{{&cardinality}}: {{> type}},{{/isSingleton}}{{/isQueryParameter}}{{#isPathParameter}}'{{&camelCaseName}}'{{&cardinality}}: {{> type}},{{/isPathParameter}}{{#isBodyParameter}}requestPayload{{&cardinality}}: {{> type}},{{/isBodyParameter}}
{{/parameters}}
}): Promise< {{#responses}}{{#status200}}{{#tsType}}{{> type}}{{/tsType}}{{/status200}}{{/responses}} > {
    let path = '{{&path}}';
    let body: any;
    let queryParameters: any = {};

{{#parameters}}
    {{#isQueryParameter}}
        {{#isSingleton}}
            queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#isPatternType}}
                Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                        queryParameters[parameterName] = parameters[parameterName];
                    }
                });
            {{/isPatternType}}
            {{^isPatternType}}
                if(parameters['{{&camelCaseName}}'] !== undefined) {
                    queryParameters['{{&name}}'] = parameters['{{&camelCaseName}}']
                }
            {{/isPatternType}}
        {{/isSingleton}}
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', `${parameters['{{&camelCaseName}}']}`);
    {{/isPathParameter}}

    {{#isBodyParameter}}
        if(parameters['requestPayload'] !== undefined) {
            body = parameters['requestPayload'];
        }
    {{/isBodyParameter}}
{{/parameters}}

    {{^isBodyParameter}}
        {{#isPOST}}
            queryParameters = {};
        {{/isPOST}}
    {{/isBodyParameter}}

    const result: {{#responses}}{{#status200}}{{#tsType}}{{> type}}{{/tsType}}{{/status200}}{{/responses}} = await this.http.request({method:"{{method}}", url:path, params:queryParameters, payload:body } );
    return result;
}
